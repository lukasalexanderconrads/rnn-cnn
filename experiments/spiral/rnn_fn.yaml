name: spiral/rnn_fn/
device: cuda:0
num_runs: 10
seed: 1

model:
  module: lab.models.recurrence_function
  name: LearnableRNN
  args:
    rnn_type: ['linear']
    rnn_dim: 5
    max_rec: 2               # maximum number of recurrences

    reg_weight: .1
    reg_target: !!python/tuple [.8, .2]

    rec_fn_layers: [ !!python/tuple [5] ]
    rec_fn_input: [embedding]

loader:
  module: lab.data.dataloaders
  name: DataLoaderSpiral
  args:
    batch_size: 100
    seed: 1

optimizer:
  module: torch.optim
  name: Adam
  args:
    lr: .001

trainer:
  module: lab.trainer
  name: Trainer
  args:
    n_epochs: 1000
    bm_metric: loss
    early_stop_criterion: 300 # if no improvement over this many epochs, stop training
    log_dir: results
    save_dir: results

    #loss_scheduler: None # fraction of total training that a given loss type is active
      #first_step: .0    # loss is computed for the first step's output
      #every_step: .0    # loss is computed for every step's output
      # remaining time:   loss is computed for the final step's output

    #max_rec_scheduler: # linear increase from min to max
      #min: 1
      #max: 2

