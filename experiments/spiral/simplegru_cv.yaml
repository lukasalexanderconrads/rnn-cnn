name: spiral/simplegru_cv/
device: cuda:0
num_runs: 1
seed: 1

model:
  module: lab.models.simple
  name: SimpleGRU
  args:
    fc_dims: !!python/tuple []
    gru_dim: 4
    head_dims: !!python/tuple []
    threshold: [.9, .7]             # threshold above which recurrence is stopped
    max_rec: 2               # maximum number of recurrences
    loss_type: final          # final, every, (first)
    fixed_input: [True, False]

loader:
  module: lab.data.dataloaders_crossval
  name: DataLoaderSpiralCV
  args:
    batch_size: 100
    seed: 1

optimizer:
  module: torch.optim
  name: Adam
  args:
    lr: .001

trainer:
  module: lab.trainer
  name: CrossValidationTrainer
  args:
    n_epochs: 1000
    bm_metric: cross_entropy
    early_stop_criterion: 200 # if no improvement over this many epochs, stop training
    log_dir: results
    save_dir: results

    #loss_scheduler: None # fraction of total training that a given loss type is active
      #first_step: .0    # loss is computed for the first step's output
      #every_step: .0    # loss is computed for every step's output
      # remaining time:   loss is computed for the final step's output

    max_rec_scheduler: # step wise increase from min to max
      step_length: 50  # how many epochs is one step

